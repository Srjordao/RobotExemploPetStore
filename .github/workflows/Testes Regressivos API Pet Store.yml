name: Testes Regressivos API Pet Store

permissions:

  issues: write
on:
  workflow_dispatch:  # Aciona quando o workflow_dispatch for chamado
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    - cron: "10 * * * *"

jobs:
  run_robot_tests:
    name: Rodar Testes e Criar Issue se Falhar
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Instalar depend√™ncias
        run: |
          pip install --upgrade pip
          pip install --upgrade setuptools
          pip install allure-robotframework
          pip install robotframework-faker
          pip install robotframework-jsonlibrary
          pip install robotframework-jsonschemalibrary
          pip install robotframework-jsonvalidator
          pip install robotframework-metrics
          pip install robotframework-requests
          pip install robotframework-xvfb
          pip install robotframework-pythonlibcore
          pip install pyyaml

      - name: Rodar Testes com Robot Framework
        run: |
          robot -d output tests/
        continue-on-error: true

      - name: Publicar Relat√≥rio do Robot como Artefato
        uses: actions/upload-artifact@v4
        with:
          name: robot-log-html
          path: output/log.html

      - name: Criar Issue se Testes Falharem
        if: always()  # Executa sempre, independentemente do sucesso ou falha
        uses: actions/github-script@v3
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              // Lendo o arquivo output.xml
              const xmlFilePath = path.join(process.env.GITHUB_WORKSPACE, 'output', 'output.xml');
              const xmlContent = fs.existsSync(xmlFilePath) ? fs.readFileSync(xmlFilePath, 'utf8') : null;

              // Verifica se o arquivo output.xml foi encontrado e tem conte√∫do
              if (!xmlContent || xmlContent.trim() === '') {
                console.log('‚ö†Ô∏è Arquivo output.xml n√£o encontrado ou est√° vazio. N√£o ser√° criada uma issue.');
                return;
              }

              // Procurando por mensagens de falha no XML
              const failRegex = /<status status="FAIL".*?>\s*(.*?)\s*<\/status>/gi;
              let match;
              let failText = '';

              while ((match = failRegex.exec(xmlContent)) !== null) {
                failText += `üí• ${match[1].trim()}\n\n`;
              }

              // Se n√£o houver falhas, n√£o cria a issue
              if (!failText) {
                console.log('üéâ Todos os testes passaram. N√£o ser√° criada uma issue.');
                return;
              }

              // Configura√ß√£o dos detalhes da issue
              const issueTitle = `‚ö†Ô∏è Testes falharam em ${context.workflow} - ${new Date().toISOString()}`;

              // Limite de caracteres para o corpo da issue
              const characterLimit = 15000;

              // Criar corpo da issue com os detalhes dos erros
              const issueBody = `
                ## üõë Detalhes do Erro

                **‚ö†Ô∏è Logs contendo "FAIL":**
                \`\`\`
                ${failText.slice(0, characterLimit)}
                \`\`\`

                üöÄ **A√ß√£o Recomendada:** Verifique os logs acima para identificar e corrigir os erros. Vamos melhorar esses testes! üí™
              `;

              // Criar a issue no reposit√≥rio
              await github.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['bug', 'automated test failure'],
              });
            } catch (error) {
              console.log('‚ùå Erro ao processar o arquivo XML ou criar a issue:', error.message);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
