name: Testes Regressivos API Pet Store

permissions:
  issues: write

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    - cron: "0 * * * *"

jobs:
  create_issue_on_failure:
    name: Criar Issue se Testes Falharem
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install --upgrade setuptools
          pip install allure-robotframework
          pip install robotframework-faker
          pip install robotframework-jsonlibrary
          pip install robotframework-jsonschemalibrary
          pip install robotframework-jsonvalidator
          pip install robotframework-metrics
          pip install robotframework-requests
          pip install robotframework-xvfb
          pip install robotframework-pythonlibcore
          pip install pyyaml
          pip install beautifulsoup4

      - name: Run Robot Framework tests
        run: |
          robot -d output/allure --listener allure_robotframework "tests"
        continue-on-error: true  # Continua o fluxo mesmo se falhar

      - name: Extract Error Logs
        id: extract_logs
        run: |
          echo "Extraindo logs de erro..."
          # Define o caminho do arquivo de log
          LOG_FILE='/home/runner/work/RobotExemploPetStore/RobotExemploPetStore/output/allure/log.html'
          
          if [ -f "$LOG_FILE" ]; then
            # Extrair logs de erro contendo a palavra "FAIL"
            grep -A 20 'FAIL' "$LOG_FILE" > output/allure/error_log.txt || echo "Não foram encontrados erros no log."
          else
            echo "Arquivo log.html não encontrado." > output/allure/error_log.txt
          fi

      - name: Debug Log Output
        if: always()  # Sempre executa, independentemente do sucesso ou falha
        run: |
          echo "Verificando logs..."
          ls -l /home/runner/work/RobotExemploPetStore/RobotExemploPetStore/output/allure/
          cat /home/runner/work/RobotExemploPetStore/RobotExemploPetStore/output/allure/log.html || echo "log.html não encontrado."
          cat output/allure/error_log.txt || echo "error_log.txt não encontrado."

      - name: Create Issue if Tests Fail
        if: always()  # Sempre executa, independentemente do sucesso ou falha
        uses: actions/github-script@v3
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Configuração dos detalhes da issue
            const issueTitle = `Testes falharam em ${context.workflow} - ${new Date().toISOString()}`;
            
            // Lendo o log de erro específico
            const errorLogPath = path.join(process.env.GITHUB_WORKSPACE, 'output/allure/error_log.txt');
            const errorLog = fs.existsSync(errorLogPath) ? fs.readFileSync(errorLogPath, 'utf8') : 'Log de erro não encontrado.';

            const issueBody = `
              ## Detalhes do Erro

              **Logs de Erro dos Testes Falhados:**
              \`\`\`
              ${errorLog.slice(0, 10000)}  // Limitando a 10000 caracteres para não sobrecarregar a issue
              \`\`\`

              **Action:** Verifique os logs para identificar e corrigir os erros.
            `;

            // Criar a issue no repositório
            await github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['bug', 'automated test failure'],  // Adiciona etiquetas à issue
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Allure Report as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: allure-report
          path: output/allure

  hourly_job:
    name: Hourly Job
    runs-on: ubuntu-latest
    steps:
      - name: Print Current Time
        run: echo "The current time is $(date)"
